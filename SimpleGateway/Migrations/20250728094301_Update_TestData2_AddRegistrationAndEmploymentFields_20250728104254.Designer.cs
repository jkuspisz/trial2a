// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SimpleGateway.Data;

#nullable disable

namespace SimpleGateway.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250728094301_Update_TestData2_AddRegistrationAndEmploymentFields_20250728104254")]
    partial class Update_TestData2_AddRegistrationAndEmploymentFields_20250728104254
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SimpleGateway.Models.AssignmentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdvisorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("PerformerId")
                        .HasColumnType("integer");

                    b.Property<int?>("SupervisorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("PerformerId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("SimpleGateway.Models.FileUploadEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<int>("FileUploadModelId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FileUploadModelId");

                    b.ToTable("FileUploadEntries");
                });

            modelBuilder.Entity("SimpleGateway.Models.FileUploadModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("HasIndemnityEvidence")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FileUploads");
                });

            modelBuilder.Entity("SimpleGateway.Models.PerformerDetailsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfDentalQualification")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfUKRegistration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GDCNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PracticeAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PracticePostCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SupportingDentist")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SupportingDentistContactNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UniversityCountryOfQualification")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("PerformerDetails");
                });

            modelBuilder.Entity("SimpleGateway.Models.TestDataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastPatientTreatment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UKWorkExperience")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TestData");
                });

            modelBuilder.Entity("SimpleGateway.Models.TestDataModel2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AmalgamConfidence")
                        .HasColumnType("integer");

                    b.Property<string>("AmalgamLastDate")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("AmalgamNeedSupport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int?>("AmalgamNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("BPEConfidence")
                        .HasColumnType("integer");

                    b.Property<string>("BPELastDate")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("BPENeedSupport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int?>("BPENumber")
                        .HasColumnType("integer");

                    b.Property<int?>("ClinicalExamConfidence")
                        .HasColumnType("integer");

                    b.Property<string>("ClinicalExamLastDate")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("ClinicalExamNeedSupport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int?>("ClinicalExamNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("CompositeConfidence")
                        .HasColumnType("integer");

                    b.Property<string>("CompositeLastDate")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("CompositeNeedSupport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int?>("CompositeNumber")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CrownsConfidence")
                        .HasColumnType("integer");

                    b.Property<string>("CrownsLastDate")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("CrownsNeedSupport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int?>("CrownsNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("DenturesConfidence")
                        .HasColumnType("integer");

                    b.Property<string>("DenturesLastDate")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("DenturesNeedSupport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int?>("DenturesNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("ExtractionsConfidence")
                        .HasColumnType("integer");

                    b.Property<string>("ExtractionsLastDate")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("ExtractionsNeedSupport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int?>("ExtractionsNumber")
                        .HasColumnType("integer");

                    b.Property<string>("GDCRegistrationGaps")
                        .HasColumnType("text");

                    b.Property<string>("GDCRegistrationNumber")
                        .HasColumnType("text");

                    b.Property<string>("LastPatientTreatment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MostRecentJobAddress")
                        .HasColumnType("text");

                    b.Property<bool>("MostRecentJobAdultPatients")
                        .HasColumnType("boolean");

                    b.Property<bool>("MostRecentJobChildPatients")
                        .HasColumnType("boolean");

                    b.Property<string>("MostRecentJobFromDate")
                        .HasColumnType("text");

                    b.Property<string>("MostRecentJobTitle")
                        .HasColumnType("text");

                    b.Property<string>("MostRecentJobToDate")
                        .HasColumnType("text");

                    b.Property<int?>("MultiEndoConfidence")
                        .HasColumnType("integer");

                    b.Property<string>("MultiEndoLastDate")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("MultiEndoNeedSupport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int?>("MultiEndoNumber")
                        .HasColumnType("integer");

                    b.Property<string>("NHSExperience")
                        .HasColumnType("text");

                    b.Property<string>("NHSExperienceDaysPerWeek")
                        .HasColumnType("text");

                    b.Property<string>("NHSExperienceMonths")
                        .HasColumnType("text");

                    b.Property<string>("NHSExperienceType")
                        .HasColumnType("text");

                    b.Property<string>("NHSExperienceYears")
                        .HasColumnType("text");

                    b.Property<int?>("PeadsConfidence")
                        .HasColumnType("integer");

                    b.Property<string>("PeadsLastDate")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("PeadsNeedSupport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int?>("PeadsNumber")
                        .HasColumnType("integer");

                    b.Property<string>("PrimaryQualification")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryQualificationCountry")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryQualificationInstitution")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryQualificationYear")
                        .HasColumnType("text");

                    b.Property<int?>("RadiographsConfidence")
                        .HasColumnType("integer");

                    b.Property<string>("RadiographsLastDate")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("RadiographsNeedSupport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int?>("RadiographsNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("RootDivisionConfidence")
                        .HasColumnType("integer");

                    b.Property<string>("RootDivisionLastDate")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("RootDivisionNeedSupport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int?>("RootDivisionNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("ScalingConfidence")
                        .HasColumnType("integer");

                    b.Property<string>("ScalingLastDate")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("ScalingNeedSupport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int?>("ScalingNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("SingleEndoConfidence")
                        .HasColumnType("integer");

                    b.Property<string>("SingleEndoLastDate")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("SingleEndoNeedSupport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int?>("SingleEndoNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("SixPPCConfidence")
                        .HasColumnType("integer");

                    b.Property<string>("SixPPCLastDate")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("SixPPCNeedSupport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int?>("SixPPCNumber")
                        .HasColumnType("integer");

                    b.Property<string>("UKRegistrationDate")
                        .HasColumnType("text");

                    b.Property<string>("UKWorkExperience")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.ToTable("TestData2");
                });

            modelBuilder.Entity("SimpleGateway.Models.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Department")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayName = "Administrator",
                            Email = "admin@example.com",
                            FirstName = "Admin",
                            IsActive = true,
                            LastName = "User",
                            Password = "$2a$11$K5ZfJ5WMzHPbfT6Gw4YzWOxKoKjQnN8qFZHlUZ7QJC8CgCYzq8dUy",
                            Role = "Admin",
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayName = "Dr. John Smith",
                            Email = "john.smith@example.com",
                            FirstName = "John",
                            IsActive = true,
                            LastName = "Smith",
                            Password = "$2a$11$nrmQZZ2qLbT4mFyf3u4D9uqNPqK9M1XKoFVh8kWIUx8rRyJhU7uBK",
                            Role = "Performer",
                            Username = "performer1"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayName = "Dr. James Brown",
                            Email = "james.brown@example.com",
                            FirstName = "James",
                            IsActive = true,
                            LastName = "Brown",
                            Password = "$2a$11$X.9UhD2YhUYqZpD3.eM5yOY4z5ZkKUGKjGP.rM6OqQC5eEfLHdDFu",
                            Role = "Performer",
                            Username = "james"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DisplayName = "Agency Manager",
                            Email = "agency@example.com",
                            FirstName = "Agency",
                            IsActive = true,
                            LastName = "Manager",
                            Password = "$2a$11$Th4qZ8zSB5qF9kJ1OzOhzOmA8pG3u2CpLn5RtD9HwGv6mJkF3uP2w",
                            Role = "Agency",
                            Username = "agency1"
                        });
                });

            modelBuilder.Entity("SimpleGateway.Models.AssignmentModel", b =>
                {
                    b.HasOne("SimpleGateway.Models.UserModel", "Advisor")
                        .WithMany()
                        .HasForeignKey("AdvisorId");

                    b.HasOne("SimpleGateway.Models.UserModel", "Performer")
                        .WithMany()
                        .HasForeignKey("PerformerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleGateway.Models.UserModel", "Supervisor")
                        .WithMany()
                        .HasForeignKey("SupervisorId");

                    b.Navigation("Advisor");

                    b.Navigation("Performer");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("SimpleGateway.Models.FileUploadEntry", b =>
                {
                    b.HasOne("SimpleGateway.Models.FileUploadModel", "FileUploadModel")
                        .WithMany("UploadedFiles")
                        .HasForeignKey("FileUploadModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileUploadModel");
                });

            modelBuilder.Entity("SimpleGateway.Models.FileUploadModel", b =>
                {
                    b.Navigation("UploadedFiles");
                });
#pragma warning restore 612, 618
        }
    }
}
