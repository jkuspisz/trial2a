// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SimpleGateway.Data;

#nullable disable

namespace SimpleGateway.Migrations.TestData2
{
    [DbContext(typeof(TestData2Context))]
    partial class TestData2ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SimpleGateway.Models.TestDataModel2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdvisorComment")
                        .HasColumnType("text");

                    b.Property<int?>("AmalgamConfidence")
                        .HasColumnType("integer");

                    b.Property<string>("AmalgamLastDate")
                        .HasColumnType("text");

                    b.Property<bool>("AmalgamNeedSupport")
                        .HasColumnType("boolean");

                    b.Property<int?>("AmalgamNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("BPEConfidence")
                        .HasColumnType("integer");

                    b.Property<string>("BPELastDate")
                        .HasColumnType("text");

                    b.Property<bool>("BPENeedSupport")
                        .HasColumnType("boolean");

                    b.Property<int?>("BPENumber")
                        .HasColumnType("integer");

                    b.Property<int?>("ClinicalExamConfidence")
                        .HasColumnType("integer");

                    b.Property<string>("ClinicalExamLastDate")
                        .HasColumnType("text");

                    b.Property<bool>("ClinicalExamNeedSupport")
                        .HasColumnType("boolean");

                    b.Property<int?>("ClinicalExamNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("CompositeConfidence")
                        .HasColumnType("integer");

                    b.Property<string>("CompositeLastDate")
                        .HasColumnType("text");

                    b.Property<bool>("CompositeNeedSupport")
                        .HasColumnType("boolean");

                    b.Property<int?>("CompositeNumber")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CrownsConfidence")
                        .HasColumnType("integer");

                    b.Property<string>("CrownsLastDate")
                        .HasColumnType("text");

                    b.Property<bool>("CrownsNeedSupport")
                        .HasColumnType("boolean");

                    b.Property<int?>("CrownsNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("DenturesConfidence")
                        .HasColumnType("integer");

                    b.Property<string>("DenturesLastDate")
                        .HasColumnType("text");

                    b.Property<bool>("DenturesNeedSupport")
                        .HasColumnType("boolean");

                    b.Property<int?>("DenturesNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("ExtractionsConfidence")
                        .HasColumnType("integer");

                    b.Property<string>("ExtractionsLastDate")
                        .HasColumnType("text");

                    b.Property<bool>("ExtractionsNeedSupport")
                        .HasColumnType("boolean");

                    b.Property<int?>("ExtractionsNumber")
                        .HasColumnType("integer");

                    b.Property<string>("GDCRegistrationGaps")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("GDCRegistrationNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Job1Address")
                        .HasColumnType("text");

                    b.Property<bool>("Job1AdultPatients")
                        .HasColumnType("boolean");

                    b.Property<bool>("Job1ChildPatients")
                        .HasColumnType("boolean");

                    b.Property<string>("Job1FromDate")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Job1Title")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Job1ToDate")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Job1Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Job2Address")
                        .HasColumnType("text");

                    b.Property<bool>("Job2AdultPatients")
                        .HasColumnType("boolean");

                    b.Property<bool>("Job2ChildPatients")
                        .HasColumnType("boolean");

                    b.Property<string>("Job2FromDate")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Job2Title")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Job2ToDate")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Job2Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Job3Address")
                        .HasColumnType("text");

                    b.Property<bool>("Job3AdultPatients")
                        .HasColumnType("boolean");

                    b.Property<bool>("Job3ChildPatients")
                        .HasColumnType("boolean");

                    b.Property<string>("Job3FromDate")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Job3Title")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Job3ToDate")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Job3Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Job4Address")
                        .HasColumnType("text");

                    b.Property<bool>("Job4AdultPatients")
                        .HasColumnType("boolean");

                    b.Property<bool>("Job4ChildPatients")
                        .HasColumnType("boolean");

                    b.Property<string>("Job4FromDate")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Job4Title")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Job4ToDate")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Job4Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Job5Address")
                        .HasColumnType("text");

                    b.Property<bool>("Job5AdultPatients")
                        .HasColumnType("boolean");

                    b.Property<bool>("Job5ChildPatients")
                        .HasColumnType("boolean");

                    b.Property<string>("Job5FromDate")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Job5Title")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Job5ToDate")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Job5Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Job6Address")
                        .HasColumnType("text");

                    b.Property<bool>("Job6AdultPatients")
                        .HasColumnType("boolean");

                    b.Property<bool>("Job6ChildPatients")
                        .HasColumnType("boolean");

                    b.Property<string>("Job6FromDate")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Job6Title")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Job6ToDate")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Job6Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastPatientTreatment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("MultiEndoConfidence")
                        .HasColumnType("integer");

                    b.Property<string>("MultiEndoLastDate")
                        .HasColumnType("text");

                    b.Property<bool>("MultiEndoNeedSupport")
                        .HasColumnType("boolean");

                    b.Property<int?>("MultiEndoNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("PeadsConfidence")
                        .HasColumnType("integer");

                    b.Property<string>("PeadsLastDate")
                        .HasColumnType("text");

                    b.Property<bool>("PeadsNeedSupport")
                        .HasColumnType("boolean");

                    b.Property<int?>("PeadsNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Qualification1")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Qualification1Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Qualification1Institution")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Qualification1Year")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Qualification2")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Qualification2Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Qualification2Institution")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Qualification2Year")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Qualification3")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Qualification3Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Qualification3Institution")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Qualification3Year")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Qualification4")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Qualification4Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Qualification4Institution")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Qualification4Year")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Qualification5")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Qualification5Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Qualification5Institution")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Qualification5Year")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Qualification6")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Qualification6Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Qualification6Institution")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Qualification6Year")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int?>("RadiographsConfidence")
                        .HasColumnType("integer");

                    b.Property<string>("RadiographsLastDate")
                        .HasColumnType("text");

                    b.Property<bool>("RadiographsNeedSupport")
                        .HasColumnType("boolean");

                    b.Property<int?>("RadiographsNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("RootDivisionConfidence")
                        .HasColumnType("integer");

                    b.Property<string>("RootDivisionLastDate")
                        .HasColumnType("text");

                    b.Property<bool>("RootDivisionNeedSupport")
                        .HasColumnType("boolean");

                    b.Property<int?>("RootDivisionNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("ScalingConfidence")
                        .HasColumnType("integer");

                    b.Property<string>("ScalingLastDate")
                        .HasColumnType("text");

                    b.Property<bool>("ScalingNeedSupport")
                        .HasColumnType("boolean");

                    b.Property<int?>("ScalingNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("SingleEndoConfidence")
                        .HasColumnType("integer");

                    b.Property<string>("SingleEndoLastDate")
                        .HasColumnType("text");

                    b.Property<bool>("SingleEndoNeedSupport")
                        .HasColumnType("boolean");

                    b.Property<int?>("SingleEndoNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("SixPPCConfidence")
                        .HasColumnType("integer");

                    b.Property<string>("SixPPCLastDate")
                        .HasColumnType("text");

                    b.Property<bool>("SixPPCNeedSupport")
                        .HasColumnType("boolean");

                    b.Property<int?>("SixPPCNumber")
                        .HasColumnType("integer");

                    b.Property<string>("UKRegistrationDate")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UKWorkExperience")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Username");

                    b.ToTable("TestData2");
                });
#pragma warning restore 612, 618
        }
    }
}
