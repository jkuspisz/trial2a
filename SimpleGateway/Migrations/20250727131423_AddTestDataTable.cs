using System;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

#pragma warning disable CA1814 // Prefer jagged arrays over multidimensional

namespace SimpleGateway.Migrations
{
    /// <inheritdoc />
    public partial class AddTestDataTable : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            // Only create FileUploads table if it doesn't exist
            migrationBuilder.Sql(@"
                CREATE TABLE IF NOT EXISTS ""FileUploads"" (
                    ""Id"" integer GENERATED BY DEFAULT AS IDENTITY,
                    ""Username"" text NOT NULL,
                    ""HasIndemnityEvidence"" boolean NOT NULL,
                    ""LastUpdated"" timestamp with time zone,
                    ""CreatedAt"" timestamp with time zone NOT NULL,
                    CONSTRAINT ""PK_FileUploads"" PRIMARY KEY (""Id"")
                );
            ");

            migrationBuilder.CreateTable(
                name: "PerformerDetails",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    FirstName = table.Column<string>(type: "text", nullable: false),
                    LastName = table.Column<string>(type: "text", nullable: false),
                    GDCNumber = table.Column<string>(type: "text", nullable: false),
                    Email = table.Column<string>(type: "text", nullable: false),
                    ContactNumber = table.Column<string>(type: "text", nullable: false),
                    SupportingDentist = table.Column<string>(type: "text", nullable: false),
                    SupportingDentistContactNumber = table.Column<string>(type: "text", nullable: false),
                    PracticeAddress = table.Column<string>(type: "text", nullable: false),
                    PracticePostCode = table.Column<string>(type: "text", nullable: false),
                    DateOfUKRegistration = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    DateOfDentalQualification = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    UniversityCountryOfQualification = table.Column<string>(type: "text", nullable: false),
                    IsCompleted = table.Column<bool>(type: "boolean", nullable: false),
                    Username = table.Column<string>(type: "text", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PerformerDetails", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "TestData",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    UKWorkExperience = table.Column<string>(type: "text", nullable: false),
                    LastPatientTreatment = table.Column<string>(type: "text", nullable: false),
                    Username = table.Column<string>(type: "text", nullable: false),
                    CreatedDate = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    ModifiedDate = table.Column<DateTime>(type: "timestamp with time zone", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TestData", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Users",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Username = table.Column<string>(type: "character varying(50)", maxLength: 50, nullable: false),
                    Password = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: false),
                    FirstName = table.Column<string>(type: "character varying(50)", maxLength: 50, nullable: false),
                    LastName = table.Column<string>(type: "character varying(50)", maxLength: 50, nullable: false),
                    DisplayName = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                    Role = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: false),
                    Email = table.Column<string>(type: "text", nullable: true),
                    Department = table.Column<string>(type: "text", nullable: true),
                    CreatedDate = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    LastLoginDate = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    IsActive = table.Column<bool>(type: "boolean", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Users", x => x.Id);
                });

            // Only create FileUploadEntries table if it doesn't exist  
            migrationBuilder.Sql(@"
                CREATE TABLE IF NOT EXISTS ""FileUploadEntries"" (
                    ""Id"" integer GENERATED BY DEFAULT AS IDENTITY,
                    ""FileId"" text NOT NULL,
                    ""Description"" text NOT NULL,
                    ""FileName"" text NOT NULL,
                    ""FileSize"" bigint NOT NULL,
                    ""ContentType"" text NOT NULL,
                    ""UploadedAt"" timestamp with time zone NOT NULL,
                    ""FilePath"" text NOT NULL,
                    ""IsRequired"" boolean NOT NULL,
                    ""Category"" text NOT NULL,
                    ""FileUploadModelId"" integer NOT NULL,
                    CONSTRAINT ""PK_FileUploadEntries"" PRIMARY KEY (""Id""),
                    CONSTRAINT ""FK_FileUploadEntries_FileUploads_FileUploadModelId"" FOREIGN KEY (""FileUploadModelId"") REFERENCES ""FileUploads"" (""Id"") ON DELETE CASCADE
                );
            ");
            
            // Create index if it doesn't exist
            migrationBuilder.Sql(@"
                CREATE INDEX IF NOT EXISTS ""IX_FileUploadEntries_FileUploadModelId"" ON ""FileUploadEntries"" (""FileUploadModelId"");
            ");

            migrationBuilder.CreateTable(
                name: "Assignments",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    PerformerId = table.Column<int>(type: "integer", nullable: false),
                    SupervisorId = table.Column<int>(type: "integer", nullable: true),
                    AdvisorId = table.Column<int>(type: "integer", nullable: true),
                    Notes = table.Column<string>(type: "character varying(1000)", maxLength: 1000, nullable: true),
                    CreatedDate = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    ModifiedDate = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    IsActive = table.Column<bool>(type: "boolean", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Assignments", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Assignments_Users_AdvisorId",
                        column: x => x.AdvisorId,
                        principalTable: "Users",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Assignments_Users_PerformerId",
                        column: x => x.PerformerId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Assignments_Users_SupervisorId",
                        column: x => x.SupervisorId,
                        principalTable: "Users",
                        principalColumn: "Id");
                });

            migrationBuilder.InsertData(
                table: "Users",
                columns: new[] { "Id", "CreatedDate", "Department", "DisplayName", "Email", "FirstName", "IsActive", "LastLoginDate", "LastName", "Password", "Role", "Username" },
                values: new object[,]
                {
                    { 1, new DateTime(2025, 7, 27, 13, 14, 22, 386, DateTimeKind.Utc).AddTicks(497), null, "Administrator", "admin@example.com", "Admin", true, null, "User", "$2a$11$K5ZfJ5WMzHPbfT6Gw4YzWOxKoKjQnN8qFZHlUZ7QJC8CgCYzq8dUy", "Admin", "admin" },
                    { 2, new DateTime(2025, 7, 27, 13, 14, 22, 386, DateTimeKind.Utc).AddTicks(1523), null, "Dr. John Smith", "john.smith@example.com", "John", true, null, "Smith", "$2a$11$nrmQZZ2qLbT4mFyf3u4D9uqNPqK9M1XKoFVh8kWIUx8rRyJhU7uBK", "Performer", "performer1" },
                    { 3, new DateTime(2025, 7, 27, 13, 14, 22, 386, DateTimeKind.Utc).AddTicks(1554), null, "Dr. James Brown", "james.brown@example.com", "James", true, null, "Brown", "$2a$11$X.9UhD2YhUYqZpD3.eM5yOY4z5ZkKUGKjGP.rM6OqQC5eEfLHdDFu", "Performer", "james" },
                    { 4, new DateTime(2025, 7, 27, 13, 14, 22, 386, DateTimeKind.Utc).AddTicks(1557), null, "Agency Manager", "agency@example.com", "Agency", true, null, "Manager", "$2a$11$Th4qZ8zSB5qF9kJ1OzOhzOmA8pG3u2CpLn5RtD9HwGv6mJkF3uP2w", "Agency", "agency1" }
                });

            migrationBuilder.CreateIndex(
                name: "IX_Assignments_AdvisorId",
                table: "Assignments",
                column: "AdvisorId");

            migrationBuilder.CreateIndex(
                name: "IX_Assignments_PerformerId",
                table: "Assignments",
                column: "PerformerId");

            migrationBuilder.CreateIndex(
                name: "IX_Assignments_SupervisorId",
                table: "Assignments",
                column: "SupervisorId");

            migrationBuilder.CreateIndex(
                name: "IX_PerformerDetails_Username",
                table: "PerformerDetails",
                column: "Username",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Users_Username",
                table: "Users",
                column: "Username",
                unique: true);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "Assignments");

            migrationBuilder.DropTable(
                name: "FileUploadEntries");

            migrationBuilder.DropTable(
                name: "PerformerDetails");

            migrationBuilder.DropTable(
                name: "TestData");

            migrationBuilder.DropTable(
                name: "Users");

            migrationBuilder.DropTable(
                name: "FileUploads");
        }
    }
}
