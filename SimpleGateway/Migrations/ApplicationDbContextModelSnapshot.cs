// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SimpleGateway.Data;

#nullable disable

namespace SimpleGateway.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SimpleGateway.Models.AssignmentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdvisorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("PerformerId")
                        .HasColumnType("integer");

                    b.Property<int?>("SupervisorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("PerformerId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("SimpleGateway.Models.FileUploadEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<int>("FileUploadModelId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FileUploadModelId");

                    b.ToTable("FileUploadEntries");
                });

            modelBuilder.Entity("SimpleGateway.Models.FileUploadModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("HasIndemnityEvidence")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FileUploads");
                });

            modelBuilder.Entity("SimpleGateway.Models.PerformerDetailsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfDentalQualification")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfUKRegistration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GDCNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PracticeAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PracticePostCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SupportingDentist")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SupportingDentistContactNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UniversityCountryOfQualification")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("PerformerDetails");
                });

            modelBuilder.Entity("SimpleGateway.Models.TestDataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastPatientTreatment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UKWorkExperience")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TestData");
                });

            modelBuilder.Entity("SimpleGateway.Models.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Department")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 7, 27, 13, 14, 22, 386, DateTimeKind.Utc).AddTicks(497),
                            DisplayName = "Administrator",
                            Email = "admin@example.com",
                            FirstName = "Admin",
                            IsActive = true,
                            LastName = "User",
                            Password = "$2a$11$K5ZfJ5WMzHPbfT6Gw4YzWOxKoKjQnN8qFZHlUZ7QJC8CgCYzq8dUy",
                            Role = "Admin",
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2025, 7, 27, 13, 14, 22, 386, DateTimeKind.Utc).AddTicks(1523),
                            DisplayName = "Dr. John Smith",
                            Email = "john.smith@example.com",
                            FirstName = "John",
                            IsActive = true,
                            LastName = "Smith",
                            Password = "$2a$11$nrmQZZ2qLbT4mFyf3u4D9uqNPqK9M1XKoFVh8kWIUx8rRyJhU7uBK",
                            Role = "Performer",
                            Username = "performer1"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2025, 7, 27, 13, 14, 22, 386, DateTimeKind.Utc).AddTicks(1554),
                            DisplayName = "Dr. James Brown",
                            Email = "james.brown@example.com",
                            FirstName = "James",
                            IsActive = true,
                            LastName = "Brown",
                            Password = "$2a$11$X.9UhD2YhUYqZpD3.eM5yOY4z5ZkKUGKjGP.rM6OqQC5eEfLHdDFu",
                            Role = "Performer",
                            Username = "james"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2025, 7, 27, 13, 14, 22, 386, DateTimeKind.Utc).AddTicks(1557),
                            DisplayName = "Agency Manager",
                            Email = "agency@example.com",
                            FirstName = "Agency",
                            IsActive = true,
                            LastName = "Manager",
                            Password = "$2a$11$Th4qZ8zSB5qF9kJ1OzOhzOmA8pG3u2CpLn5RtD9HwGv6mJkF3uP2w",
                            Role = "Agency",
                            Username = "agency1"
                        });
                });

            modelBuilder.Entity("SimpleGateway.Models.AssignmentModel", b =>
                {
                    b.HasOne("SimpleGateway.Models.UserModel", "Advisor")
                        .WithMany()
                        .HasForeignKey("AdvisorId");

                    b.HasOne("SimpleGateway.Models.UserModel", "Performer")
                        .WithMany()
                        .HasForeignKey("PerformerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimpleGateway.Models.UserModel", "Supervisor")
                        .WithMany()
                        .HasForeignKey("SupervisorId");

                    b.Navigation("Advisor");

                    b.Navigation("Performer");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("SimpleGateway.Models.FileUploadEntry", b =>
                {
                    b.HasOne("SimpleGateway.Models.FileUploadModel", "FileUploadModel")
                        .WithMany("UploadedFiles")
                        .HasForeignKey("FileUploadModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileUploadModel");
                });

            modelBuilder.Entity("SimpleGateway.Models.FileUploadModel", b =>
                {
                    b.Navigation("UploadedFiles");
                });
#pragma warning restore 612, 618
        }
    }
}
